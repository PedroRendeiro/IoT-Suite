// <auto-generated />
using System;
using IoTSuite.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IoTSuite.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("IoTSuite.Shared.Alarm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RFIDTagUID")
                        .HasColumnType("text");

                    b.Property<Guid>("ThingId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UID")
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("RFIDTagUID");

                    b.HasIndex("ThingId");

                    b.ToTable("Alarm");
                });

            modelBuilder.Entity("IoTSuite.Shared.AlarmUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("AlarmUser");
                });

            modelBuilder.Entity("IoTSuite.Shared.AveragePower", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("ClockId")
                        .HasColumnType("bigint");

                    b.Property<long>("P")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClockId");

                    b.ToTable("AveragePower");
                });

            modelBuilder.Entity("IoTSuite.Shared.BasicAuthUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<Guid?>("Salt")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("IoTSuite.Shared.Measure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ThingId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ThingId");

                    b.ToTable("Measure");
                });

            modelBuilder.Entity("IoTSuite.Shared.Policy", b =>
                {
                    b.Property<Guid>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("User")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("PolicyId");

                    b.HasIndex("ThingId");

                    b.ToTable("Policy");
                });

            modelBuilder.Entity("IoTSuite.Shared.Position", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("Course")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<Guid>("ThingId")
                        .HasColumnType("uuid");

                    b.Property<float>("Velocity")
                        .HasColumnType("real");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ThingId");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("IoTSuite.Shared.PowerMeterClock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.Property<int>("Hour")
                        .HasColumnType("integer");

                    b.Property<int>("Millisecond")
                        .HasColumnType("integer");

                    b.Property<int>("Minute")
                        .HasColumnType("integer");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<int>("Season")
                        .HasColumnType("integer");

                    b.Property<int>("Second")
                        .HasColumnType("integer");

                    b.Property<int>("TimeZone")
                        .HasColumnType("integer");

                    b.Property<int>("Weekday")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PowerMeterClock");
                });

            modelBuilder.Entity("IoTSuite.Shared.PowerMeterInstantaneous", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("F")
                        .HasColumnType("double precision");

                    b.Property<double>("I_L1")
                        .HasColumnType("double precision");

                    b.Property<double?>("I_L2")
                        .HasColumnType("double precision");

                    b.Property<double?>("I_L3")
                        .HasColumnType("double precision");

                    b.Property<double?>("PF_L1")
                        .HasColumnType("double precision");

                    b.Property<double?>("PF_L2")
                        .HasColumnType("double precision");

                    b.Property<double?>("PF_L3")
                        .HasColumnType("double precision");

                    b.Property<double>("PF_T")
                        .HasColumnType("double precision");

                    b.Property<double>("P_In")
                        .HasColumnType("double precision");

                    b.Property<double?>("P_L1_In")
                        .HasColumnType("double precision");

                    b.Property<double?>("P_L1_Out")
                        .HasColumnType("double precision");

                    b.Property<double?>("P_L2_In")
                        .HasColumnType("double precision");

                    b.Property<double?>("P_L2_Out")
                        .HasColumnType("double precision");

                    b.Property<double?>("P_L3_In")
                        .HasColumnType("double precision");

                    b.Property<double?>("P_L3_Out")
                        .HasColumnType("double precision");

                    b.Property<double?>("P_Out")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ThingId")
                        .HasColumnType("uuid");

                    b.Property<double>("V_L1")
                        .HasColumnType("double precision");

                    b.Property<double?>("V_L2")
                        .HasColumnType("double precision");

                    b.Property<double?>("V_L3")
                        .HasColumnType("double precision");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ThingId");

                    b.ToTable("PowerMeterInstantaneous");
                });

            modelBuilder.Entity("IoTSuite.Shared.PowerMeterTariff", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("A_In_1")
                        .HasColumnType("double precision");

                    b.Property<double>("A_In_2")
                        .HasColumnType("double precision");

                    b.Property<double>("A_In_3")
                        .HasColumnType("double precision");

                    b.Property<double?>("A_In_4")
                        .HasColumnType("double precision");

                    b.Property<double?>("A_In_5")
                        .HasColumnType("double precision");

                    b.Property<double?>("A_In_6")
                        .HasColumnType("double precision");

                    b.Property<double>("A_In_T")
                        .HasColumnType("double precision");

                    b.Property<double?>("A_Out_1")
                        .HasColumnType("double precision");

                    b.Property<double?>("A_Out_2")
                        .HasColumnType("double precision");

                    b.Property<double?>("A_Out_3")
                        .HasColumnType("double precision");

                    b.Property<double?>("A_Out_4")
                        .HasColumnType("double precision");

                    b.Property<double?>("A_Out_5")
                        .HasColumnType("double precision");

                    b.Property<double?>("A_Out_6")
                        .HasColumnType("double precision");

                    b.Property<double?>("A_Out_T")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("P_In_MAX_1Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("P_In_MAX_2Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("P_In_MAX_3Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("P_In_MAX_4Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("P_In_MAX_5Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("P_In_MAX_6Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("P_In_MAX_TId")
                        .HasColumnType("bigint");

                    b.Property<long?>("P_Out_MAX_1Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("P_Out_MAX_2Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("P_Out_MAX_3Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("P_Out_MAX_4Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("P_Out_MAX_5Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("P_Out_MAX_6Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("P_Out_MAX_TId")
                        .HasColumnType("bigint");

                    b.Property<double>("Rc_In_1")
                        .HasColumnType("double precision");

                    b.Property<double>("Rc_In_2")
                        .HasColumnType("double precision");

                    b.Property<double>("Rc_In_3")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rc_In_4")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rc_In_5")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rc_In_6")
                        .HasColumnType("double precision");

                    b.Property<double>("Rc_In_T")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rc_Out_1")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rc_Out_2")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rc_Out_3")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rc_Out_4")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rc_Out_5")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rc_Out_6")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rc_Out_T")
                        .HasColumnType("double precision");

                    b.Property<double>("Ri_In_1")
                        .HasColumnType("double precision");

                    b.Property<double>("Ri_In_2")
                        .HasColumnType("double precision");

                    b.Property<double>("Ri_In_3")
                        .HasColumnType("double precision");

                    b.Property<double?>("Ri_In_4")
                        .HasColumnType("double precision");

                    b.Property<double?>("Ri_In_5")
                        .HasColumnType("double precision");

                    b.Property<double?>("Ri_In_6")
                        .HasColumnType("double precision");

                    b.Property<double>("Ri_In_T")
                        .HasColumnType("double precision");

                    b.Property<double?>("Ri_Out_1")
                        .HasColumnType("double precision");

                    b.Property<double?>("Ri_Out_2")
                        .HasColumnType("double precision");

                    b.Property<double?>("Ri_Out_3")
                        .HasColumnType("double precision");

                    b.Property<double?>("Ri_Out_4")
                        .HasColumnType("double precision");

                    b.Property<double?>("Ri_Out_5")
                        .HasColumnType("double precision");

                    b.Property<double?>("Ri_Out_6")
                        .HasColumnType("double precision");

                    b.Property<double?>("Ri_Out_T")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ThingId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("P_In_MAX_1Id");

                    b.HasIndex("P_In_MAX_2Id");

                    b.HasIndex("P_In_MAX_3Id");

                    b.HasIndex("P_In_MAX_4Id");

                    b.HasIndex("P_In_MAX_5Id");

                    b.HasIndex("P_In_MAX_6Id");

                    b.HasIndex("P_In_MAX_TId");

                    b.HasIndex("P_Out_MAX_1Id");

                    b.HasIndex("P_Out_MAX_2Id");

                    b.HasIndex("P_Out_MAX_3Id");

                    b.HasIndex("P_Out_MAX_4Id");

                    b.HasIndex("P_Out_MAX_5Id");

                    b.HasIndex("P_Out_MAX_6Id");

                    b.HasIndex("P_Out_MAX_TId");

                    b.HasIndex("ThingId");

                    b.ToTable("PowerMeterTariff");
                });

            modelBuilder.Entity("IoTSuite.Shared.PowerMeterTotal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("A_In")
                        .HasColumnType("double precision");

                    b.Property<double?>("A_L1_In")
                        .HasColumnType("double precision");

                    b.Property<double?>("A_L1_Out")
                        .HasColumnType("double precision");

                    b.Property<double?>("A_L2_In")
                        .HasColumnType("double precision");

                    b.Property<double?>("A_L2_Out")
                        .HasColumnType("double precision");

                    b.Property<double?>("A_L3_In")
                        .HasColumnType("double precision");

                    b.Property<double?>("A_L3_Out")
                        .HasColumnType("double precision");

                    b.Property<double?>("A_Out")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("QII_QIII_OutId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QI_QIV_InId")
                        .HasColumnType("bigint");

                    b.Property<double>("Rc_In")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rc_Out")
                        .HasColumnType("double precision");

                    b.Property<double>("Ri_In")
                        .HasColumnType("double precision");

                    b.Property<double?>("Ri_Out")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ThingId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("QII_QIII_OutId");

                    b.HasIndex("QI_QIV_InId");

                    b.HasIndex("ThingId");

                    b.ToTable("PowerMeterTotal");
                });

            modelBuilder.Entity("IoTSuite.Shared.RFIDTag", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("text");

                    b.Property<long>("AlarmUserId")
                        .HasColumnType("bigint");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("UID");

                    b.HasIndex("AlarmUserId");

                    b.ToTable("RFIDTag");
                });

            modelBuilder.Entity("IoTSuite.Shared.Thing", b =>
                {
                    b.Property<Guid>("ThingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Features")
                        .HasColumnType("integer");

                    b.Property<Guid>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("ThingId");

                    b.ToTable("Thing");
                });

            modelBuilder.Entity("IoTSuite.Shared.WeatherForecast", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Summary")
                        .HasColumnType("integer");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("integer");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecast");
                });

            modelBuilder.Entity("IoTSuite.Shared.Alarm", b =>
                {
                    b.HasOne("IoTSuite.Shared.RFIDTag", "RFIDTag")
                        .WithMany()
                        .HasForeignKey("RFIDTagUID");

                    b.HasOne("IoTSuite.Shared.Thing", "Thing")
                        .WithMany()
                        .HasForeignKey("ThingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RFIDTag");

                    b.Navigation("Thing");
                });

            modelBuilder.Entity("IoTSuite.Shared.AveragePower", b =>
                {
                    b.HasOne("IoTSuite.Shared.PowerMeterClock", "Clock")
                        .WithMany()
                        .HasForeignKey("ClockId");

                    b.Navigation("Clock");
                });

            modelBuilder.Entity("IoTSuite.Shared.Measure", b =>
                {
                    b.HasOne("IoTSuite.Shared.Thing", "Thing")
                        .WithMany()
                        .HasForeignKey("ThingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thing");
                });

            modelBuilder.Entity("IoTSuite.Shared.Policy", b =>
                {
                    b.HasOne("IoTSuite.Shared.Thing", null)
                        .WithMany("Users")
                        .HasForeignKey("ThingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IoTSuite.Shared.Position", b =>
                {
                    b.HasOne("IoTSuite.Shared.Thing", "Thing")
                        .WithMany()
                        .HasForeignKey("ThingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thing");
                });

            modelBuilder.Entity("IoTSuite.Shared.PowerMeterInstantaneous", b =>
                {
                    b.HasOne("IoTSuite.Shared.Thing", "Thing")
                        .WithMany()
                        .HasForeignKey("ThingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thing");
                });

            modelBuilder.Entity("IoTSuite.Shared.PowerMeterTariff", b =>
                {
                    b.HasOne("IoTSuite.Shared.AveragePower", "P_In_MAX_1")
                        .WithMany()
                        .HasForeignKey("P_In_MAX_1Id");

                    b.HasOne("IoTSuite.Shared.AveragePower", "P_In_MAX_2")
                        .WithMany()
                        .HasForeignKey("P_In_MAX_2Id");

                    b.HasOne("IoTSuite.Shared.AveragePower", "P_In_MAX_3")
                        .WithMany()
                        .HasForeignKey("P_In_MAX_3Id");

                    b.HasOne("IoTSuite.Shared.AveragePower", "P_In_MAX_4")
                        .WithMany()
                        .HasForeignKey("P_In_MAX_4Id");

                    b.HasOne("IoTSuite.Shared.AveragePower", "P_In_MAX_5")
                        .WithMany()
                        .HasForeignKey("P_In_MAX_5Id");

                    b.HasOne("IoTSuite.Shared.AveragePower", "P_In_MAX_6")
                        .WithMany()
                        .HasForeignKey("P_In_MAX_6Id");

                    b.HasOne("IoTSuite.Shared.AveragePower", "P_In_MAX_T")
                        .WithMany()
                        .HasForeignKey("P_In_MAX_TId");

                    b.HasOne("IoTSuite.Shared.AveragePower", "P_Out_MAX_1")
                        .WithMany()
                        .HasForeignKey("P_Out_MAX_1Id");

                    b.HasOne("IoTSuite.Shared.AveragePower", "P_Out_MAX_2")
                        .WithMany()
                        .HasForeignKey("P_Out_MAX_2Id");

                    b.HasOne("IoTSuite.Shared.AveragePower", "P_Out_MAX_3")
                        .WithMany()
                        .HasForeignKey("P_Out_MAX_3Id");

                    b.HasOne("IoTSuite.Shared.AveragePower", "P_Out_MAX_4")
                        .WithMany()
                        .HasForeignKey("P_Out_MAX_4Id");

                    b.HasOne("IoTSuite.Shared.AveragePower", "P_Out_MAX_5")
                        .WithMany()
                        .HasForeignKey("P_Out_MAX_5Id");

                    b.HasOne("IoTSuite.Shared.AveragePower", "P_Out_MAX_6")
                        .WithMany()
                        .HasForeignKey("P_Out_MAX_6Id");

                    b.HasOne("IoTSuite.Shared.AveragePower", "P_Out_MAX_T")
                        .WithMany()
                        .HasForeignKey("P_Out_MAX_TId");

                    b.HasOne("IoTSuite.Shared.Thing", "Thing")
                        .WithMany()
                        .HasForeignKey("ThingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("P_In_MAX_1");

                    b.Navigation("P_In_MAX_2");

                    b.Navigation("P_In_MAX_3");

                    b.Navigation("P_In_MAX_4");

                    b.Navigation("P_In_MAX_5");

                    b.Navigation("P_In_MAX_6");

                    b.Navigation("P_In_MAX_T");

                    b.Navigation("P_Out_MAX_1");

                    b.Navigation("P_Out_MAX_2");

                    b.Navigation("P_Out_MAX_3");

                    b.Navigation("P_Out_MAX_4");

                    b.Navigation("P_Out_MAX_5");

                    b.Navigation("P_Out_MAX_6");

                    b.Navigation("P_Out_MAX_T");

                    b.Navigation("Thing");
                });

            modelBuilder.Entity("IoTSuite.Shared.PowerMeterTotal", b =>
                {
                    b.HasOne("IoTSuite.Shared.AveragePower", "QII_QIII_Out")
                        .WithMany()
                        .HasForeignKey("QII_QIII_OutId");

                    b.HasOne("IoTSuite.Shared.AveragePower", "QI_QIV_In")
                        .WithMany()
                        .HasForeignKey("QI_QIV_InId");

                    b.HasOne("IoTSuite.Shared.Thing", "Thing")
                        .WithMany()
                        .HasForeignKey("ThingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QI_QIV_In");

                    b.Navigation("QII_QIII_Out");

                    b.Navigation("Thing");
                });

            modelBuilder.Entity("IoTSuite.Shared.RFIDTag", b =>
                {
                    b.HasOne("IoTSuite.Shared.AlarmUser", null)
                        .WithMany("RFIDTags")
                        .HasForeignKey("AlarmUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IoTSuite.Shared.AlarmUser", b =>
                {
                    b.Navigation("RFIDTags");
                });

            modelBuilder.Entity("IoTSuite.Shared.Thing", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
